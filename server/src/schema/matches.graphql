enum MatchStatus {
  waiting
  playing
  finished
}

enum Team {
  we
  them
}

enum TrucoType {
  TRUCO
  RETRUCO
  VALE_CUATRO
}

enum TrucoStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum EnvidoType {
  ENVIDO
  REAL_ENVIDO
  FALTA_ENVIDO
}

enum EnvidoStatus {
  PENDING
  ACCEPTED
  REJECTED
}

type Truco {
  type: TrucoType!
  status: TrucoStatus!
  team: Team!
  hand: Int!
}

type Envido {
  list: [EnvidoType]!
  status: EnvidoStatus!
  team: Team!
}

type Match {
  id: ID!
  status: MatchStatus!
  playersCount: Int!
  points: Int!
  creator: Player!
  players: [Player!]!
}

type Card {
  id: ID!
  card: String!
  played: Boolean!
}

type cardsByPlayer {
  playerId: ID!
  cards: [String!]!
}

type Action {
  playerId: ID!
  type: String!
  points: Int
}

enum sayEnvidoMoveType {
  POINTS
  CANT_WIN
}

type playerEnvidoPoints {
  playerId: ID!
  moveType: sayEnvidoMoveType!
  team: Team!
  points: Int
}

type PlayerMatch {
  id: ID!
  status: MatchStatus!
  playersCount: Int!
  points: Int!
  creator: Player!
  players: [Player!]!
  myCards: [Card!]!
  nextPlayer: ID
  isLastPlayerFromTeam: Boolean
  cardsPlayedByPlayer: [cardsByPlayer!]!
  roundWinnerTeam: Team
  matchWinnerTeam: Team
  myPoints: Int!
  theirPoints: Int!
  truco: Truco
  envido: Envido
  # ID of the player who should say their envido points next
  nextPlayerEnvido: ID
  # List of say envido actions (how many points each player said they have)
  envidoPoints: [playerEnvidoPoints!]
  lastAction: Action
}

enum MatchListUpdateType {
  MATCH_ADDED
  MATCH_UPDATED
  MATCH_REMOVED
}

type MatchListUpdate {
  type: MatchListUpdateType!
  id: ID!
  status: MatchStatus!
  playersCount: Int!
  points: Int!
  creator: Player!
  players: [Player!]!
}

enum MatchUpdateType {
  NEW_PLAYER
  PLAYER_LEFT_GAME
  CREATOR_LEFT_GAME
  START_GAME
  NEW_MOVE
  NEW_ROUND
  TRUCO_ACTION
  ENVIDO_ACTION
}

type MatchUpdate {
  type: MatchUpdateType
  id: ID!
  status: MatchStatus!
  playersCount: Int!
  points: Int!
  creator: Player!
  players: [Player!]!
  myCards: [Card!]!
  nextPlayer: ID
  isLastPlayerFromTeam: Boolean
  cardsPlayedByPlayer: [cardsByPlayer!]!
  roundWinnerTeam: Team
  matchWinnerTeam: Team
  myPoints: Int!
  theirPoints: Int!
  truco: Truco
  envido: Envido
  # ID of the player who should say their envido points next
  nextPlayerEnvido: ID
  # List of say envido actions (how many points each player said they have)
  envidoPoints: [playerEnvidoPoints!]
  lastAction: Action
}

type Player {
  id: ID!
  name: String!
  avatar: String
  isFromFirstTeam: Boolean
}

enum TrucoActions {
  TRUCO
  RETRUCO
  VALE_CUATRO
  ACCEPT
  REJECT
}

enum EnvidoActions {
  ENVIDO
  REAL_ENVIDO
  FALTA_ENVIDO
  ACCEPT
  REJECT
}

enum SayEnvidoActions {
  TABLE
  POINTS
  CANT_WIN
  N_ARE_MORE
}

type MatchUpdateResponse {
  success: Boolean!
  message: String
}

extend type Query {
  matches: [Match!]!
  match(id: ID!): PlayerMatch!
}

# @todo: playCard should return MatchUpdatResponse instead of full match
extend type Mutation {
  createMatch(playersCount: Int!, points: Int!): Match!
  joinMatch(matchId: ID!): Match!
  leaveMatch(matchId: ID!): MatchUpdateResponse!
  playCard(matchId: ID!, cardId: ID!): PlayerMatch!
  playTruco(matchId: ID!, action: TrucoActions!): MatchUpdateResponse!
  playEnvido(matchId: ID!, action: EnvidoActions!): MatchUpdateResponse!
  sayEnvido(matchId: ID!, action: SayEnvidoActions!): MatchUpdateResponse!
  leaveRound(matchId: ID!): MatchUpdateResponse!
}

extend type Subscription {
  matchListUpdated: MatchListUpdate!
  matchUpdated(matchId: ID!): MatchUpdate!
}
